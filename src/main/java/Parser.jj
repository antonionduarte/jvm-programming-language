PARSER_BEGIN(Parser)


/** ID lister. */
import ast.*;

public class Parser {

}


PARSER_END(Parser)


SKIP:
{
		" "
	| "\t"
	| "\r"
}

TOKEN:
{
	< Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
	|
	< Num: (["0"-"9"]) + >
	|
	< PLUS : "+" >
	|
	< MINUS : "-">
	|
	< TIMES : "*">
	|
	< DIV : "/">
	|
	< LPAR : "(" >
	|
	< RPAR : ")" >
	|
	< EL: "\n" >
}

ASTNode Start():
{
	ASTNode t; 
}
{
	t = Exp() <EL>
	{ return t; }
}

ASTNode Exp():
{ 
	Token op;
	ASTNode t1, t2;
}
{
	t1 = Term() (( op = <PLUS> | op = <MINUS> ) t2 = Term() 
		{
			if (op.kind == PLUS) {
				t1 = new ASTPlus(t1, t2);
			}
			else t1 = new ASTMinus(t1, t2);
		}
	) *

	{ return t1; }
}

ASTNode Term():
{
	Token op;
	ASTNode t1, t2;
}
{
	t1 = Fact() (( op = <TIMES> | op = <DIV> ) t2 = Term() 
	 	{
	 		if (op.kind == TIMES) {
	 			t1 = new ASTTimes(t1, t2);
	 		}
	 		else t1 = new ASTDiv(t1, t2);
	 	}
	) ?

	{ return t1; }
}


ASTNode Fact():
{ 
	Token n;
	ASTNode t;
}
{
	<MINUS> t = Fact()
    {
        t = new ASTNeg(t);
        return t;
    }
	| n = <Num>
		{
			t = new ASTNum(Integer.parseInt(n.image));
			return t;
		}
	| <LPAR> t = Exp() <RPAR>
		{
			return t;
		}
}
