PARSER_BEGIN(Parser)


/** ID lister. */
package parser;

import ast.*;
import ast.flow.*;
import ast.ints.*;
import ast.bools.*;
import java.util.*;
import ast.functions.*;
import ast.references.*;
import ast.typing.utils.Parameter;import utils.*;
import ast.typing.types.*;
import ast.records.*;


public class Parser {

}


PARSER_END(Parser)


TOKEN:
{
	< LET : "let" >
	| < IF : "if" >
	| < ELSE : "else">
	| < WHILE : "while">
	| <PRINTLN : "println">
	| < TRUE : "true" >
	| < FALSE: "false" >
	| < Num: (["0"-"9"]) + >
	| < PLUS : "+" >
	| < MINUS : "-">
	| < TIMES : "*">
	| < DOT : ".">
	| < DIV : "/">
	| < OR : "||">
	| < AND : "&&">
	| < NOT : "not">
	| < LTE : "<=" >
	| < LT : "<" >
	| < GTE : ">=" >
	| < GT : ">" >
	| < EQ : "==">
	| < DIFF : "!=">
	| < LPAR : "(" >
	| < RPAR : ")" >
	| < LCURLY : "{" >
	| < RCURLY : "}" >
	| < EQUALS : "=" >
	| < DOTCOMMA : ";" >
	| < COMMA : "," >
	| < TWODOTS : ":" >
	| < FUN : "fn" >
	| < ARROW: "->" >
	| < NEW: "new" >
	| < STRUCT: "struct" >
	| < REF: "Ref" >
	| < ASSIGN: ":=" >
	| < DEREFERENCE: "!" >
	| < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}


SKIP:
{
		" "
	| "\t"
	| "\n"
	| "\r"
}

IType Type() :
{
    Token id;
    IType t;
}

{
    id = < Id > { return PrimitiveType.valueOf(id.image); }
    | <REF> <LT> t = Type() <GT> { return new ReferenceType(t); }
    | <LPAR>
        {
            List<IType> params = new ArrayList<>();
        }
        (
            t = Type()
            { params.add(t); }
            (<COMMA> t = Type() { params.add(t); })*
        )?
        <RPAR> <ARROW> t = Type()
        {
            return new FunctionType(params, t);
        }
     | <STRUCT> <LCURLY>
        {
            List<Parameter> params = new ArrayList<>();
        }
        (
            id = <Id> <TWODOTS> t = Type()
            { params.add(new Parameter(id.image, t)); }
            (<COMMA> id = <Id> <TWODOTS> t = Type() { params.add(new Parameter(id.image, t)); })*
        )?
        <RCURLY>
        {
            return new RecordType(params);
        }
}

ASTNode Start():
{
	ASTNode t; 
}
{
	t = Instruction()
	{ return t; }
}

ASTNode Instruction():{
    ASTNode t = null;
}{
    (LOOKAHEAD(3) t = Flow() | t = Exp() <DOTCOMMA>)
    {
        return t;
    }
}

ASTNode Block():
{
    ASTNode t = null;
    List<ASTNode> expressions = new ArrayList<>();
}
{
    <LCURLY>
    (
        t = Instruction()
        {
            expressions.add(t);
        }
    )*
    <RCURLY>
    {
        return new ASTBlock(expressions);
    }
}

ASTNode ElseIfChain():
{
    ASTNode cond, bodyIf, bodyElse = null;
}
{
    <IF> <LPAR> cond = Exp() <RPAR> bodyIf = Block()
        (<ELSE> (bodyElse = ElseIfChain() | bodyElse = Block()) )?
            {
                return new ASTIf(cond, bodyIf, bodyElse);
            }
}

ASTNode Flow():
{
    ASTNode cond, t;
}
{
    (
        t = ElseIfChain()
        | <WHILE> <LPAR> cond = Exp() <RPAR> t = Block() {
            t = new ASTWhile(cond, t);
        }
        | t = Block()
    )
    {
        return t;
    }
}


ASTNode Exp() :
{
	ASTNode t1, t2;
}
{
	t1 = OrChain() (
		<AND> t2 = Exp()
	{
		t1 = new ASTAnd(t1, t2);
	}) ?

	{
		return t1;
	}
}


ASTNode OrChain():
{
	ASTNode t1, t2;
}
{
	t1 = BoolTerm() (
			<OR> t2 = OrChain()
			{
				t1 = new ASTOr(t1, t2);
			}
	) ?
	{
		return t1;
	}
}


ASTNode BoolTerm():
{
	Token op;
	ASTNode t1, t2;
}
{
	<NOT> t1 = BoolTerm()
	{
		return new ASTNot(t1);
	}

	| t1 = NumExp()
		(
			(op = <LT>
		 | op = <LTE>
		 | op = <GT>
		 | op = <GTE>
		 | op = <EQ>
		 | op = <DIFF>)
		t2 = NumExp()
			{
			switch(op.kind) {
					case LT:
						t1 = new ASTLowerThan(t1, t2);
						break;
					case LTE:
						t1 = new ASTLowerOrEqual(t1, t2);
						break;
					case GT:
						t1 = new ASTGreaterThan(t1, t2);
						break;
					case GTE:
						t1 = new ASTGreaterOrEqual(t1, t2);
						break;
					case EQ:
						t1 = new ASTEqual(t1, t2);
						break;
					case DIFF:
						t1 = new ASTNotEqual(t1, t2);
						break;
					default:
						throw new RuntimeException("Unexpected token");
				}
			}
		)?
	{
		return t1;
	}
}


ASTNode NumExp():
{ 
  Token op;
  ASTNode t1, t2;
}
{
  t1 = Term() (( op = <PLUS> | op = <MINUS> ) t2 = Term() 
	{
		if (op.kind == PLUS) {
			t1 = new ASTPlus(t1, t2);
		}
		else t1 = new ASTMinus(t1, t2);
	}) *

  { return t1; }
}


ASTNode Term():
{
	Token op;
	ASTNode t1, t2;
}
{
  t1 = Fact() (( op = <TIMES> | op = <DIV> ) t2 = Term()
  {
		if (op.kind == TIMES) {
			t1 = new ASTTimes(t1, t2);
		}
		else t1 = new ASTDiv(t1, t2);
}) ?
  { return t1; }
}

ASTNode Fact():
{ 
  Token n;
  ASTNode t, bodyIf, bodyElse;
  Token id;
}
{
	<TRUE> { return new ASTBool(true); }
	| <FALSE> { return new ASTBool(false); }
	| <MINUS> t = Fact()
		{
			t = new ASTNeg(t);
			return t;
		}

	| n = <Num>
		{
			t = new ASTNum(Integer.parseInt(n.image));
			return t;
		}
	| <STRUCT> <LCURLY>
	    {
            List<Pair<String, ASTNode>> values = new ArrayList<>();
            IType type;
        }
        id = <Id> <EQUALS> t = Exp()
        {
            values.add(new Pair<>(id.image, t));
        }
        ( <DOTCOMMA> id = <Id> <EQUALS> t = Exp()
        {
            values.add(new Pair<>(id.image, t));
        })*
	 <RCURLY>
        {
            return new ASTRecord(values);
        }
	| <PRINTLN> t = Exp()
        {
            return new ASTPrint(t);
        }
	| <DEREFERENCE> t = Fact()
		{
			return new ASTDereference(t);
		}

	| <NEW> t = Exp()
		{
			return new ASTReference(t);
		}

	| <LET> (id = <Id>) <EQUALS> (t = Exp())
		{
			return new ASTDef(id.image, t);
		}
	| <FUN> <LPAR> 
		{
			ArrayList<Pair<String, IType>> p = new ArrayList<>();
			ASTNode b;
			IType type;
			IType retType = null;
		}

		(
			id = <Id> <TWODOTS> type = Type() {
				p.add(new Pair(id.image, type));
			} 
			
			(<COMMA> id = <Id> <TWODOTS> type = Type() {
				p.add(new Pair(id.image, type));
			}) *
		) ?

		<RPAR> <ARROW> retType = Type() b = Block()

		{
			return new ASTFunction(b, p, retType);
		}
		| t = Block(){
            return t;
        }
        | <IF> <LPAR> t = Exp() <RPAR> bodyIf = Exp() <ELSE> bodyElse = Exp() {
            return new ASTIf(t, bodyIf, bodyElse);
        }
		| t = RefNode(){
            return t;
        }

}

ASTNode RefNode():{
   ASTNode t;
   ASTNode l;
   Token id;
 }
 {
    l = IdOrExp()
      (
          <DOT> id = <Id> { l = new ASTGetField(l, id.image); }
      )*
    (
        <ASSIGN> t = Exp()
            {
                return new ASTAssign(l, t);
            }
        |
        <LPAR>
        		{
        			ArrayList<ASTNode> params = new ArrayList();
        			ASTNode param;
        		}

        		( param = Exp() { params.add(param); }
        		    ( <COMMA> param = Exp() { params.add(param); } ) *
                ) ?
        <RPAR>
            { return new ASTFunctionApplication(l, params); }
    )?
    {
        return l;
    }
 }

 ASTNode IdOrExp():
 {
    ASTNode t;
    Token id;
 }
 {
    id = <Id> { return new ASTId(id.image); }
    | <LPAR> t = Exp() <RPAR> { return t; }
 }

