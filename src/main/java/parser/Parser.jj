PARSER_BEGIN(Parser)


/** ID lister. */
package parser;

import ast.*;
import ast.int_nodes.*;
import ast.bool_nodes.*;
import java.util.*;

public class Parser {

}


PARSER_END(Parser)


TOKEN:
{
    < LET : "let" >
	| < Num: (["0"-"9"]) + >
	| < PLUS : "+" >
	| < MINUS : "-">
	| < TIMES : "*">
	| < DIV : "/">
	| < OR : "||">
	| < AND : "&&">
	| < NOT : "!">
	| < LTE : "<=" >
	| < LT : "<" >
	| < GTE : ">=" >
	| < GT : ">" >
	| < EQ : "==">
	| < DIFF : "!=">
	| < LPAR : "(" >
	| < RPAR : ")" >
	| < LCURLY : "{" >
	| < RCURLY : "}" >
	| < EQUALS : "=" >
	| < DOTCOMMA : ";" >
	| < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}


SKIP:
{
      " "
	| "\t"
	| "\n"
	| "\r"
}


ASTNode Start():
{
	ASTNode t; 
}
{
	t = Exp() <DOTCOMMA>
	{ return t; }
}

ASTNode Exp() :
{
    ASTNode t1, t2;
}
{
    t1 = OrChain() (
       <AND> t2 = Exp()
       {

       }
   )?
   {
       return t1;
   }
}

ASTNode OrChain():
{
    ASTNode t1, t2;
}
{
    t1 = Compare() (
        <OR> t2 = OrChain()
        {

        }
    )?
    {
        return t1;
    }
}

ASTNode Compare():
{
    Token op;
    ASTNode t1, t2;
}
{
    t1 = NumExp()
    (
       (op = <LT>
       | op = <LTE>
       | op = <GT>
       | op = <GTE>
       | op = <EQ>
       | op = <DIFF>)
    t2 = NumExp()
    )?
    {
        return t1;
    }
}

ASTNode NumExp():
{ 
  Token op;
  ASTNode t1, t2;
}
{
  t1 = Term() (( op = <PLUS> | op = <MINUS> ) t2 = Term() 
    {
  if (op.kind == PLUS) {
    t1 = new ASTPlus(t1, t2);
  }
  else t1 = new ASTMinus(t1, t2);
}
  ) *
  { return t1; }
}

ASTNode Term():
{
  Token op;
  ASTNode t1, t2;
}
{
  t1 = Fact() (( op = <TIMES> | op = <DIV> ) t2 = Term() 
  {
  if (op.kind == TIMES) {
    t1 = new ASTTimes(t1, t2);
  }
  else t1 = new ASTDiv(t1, t2);
}) ?
  { return t1; }
}


ASTNode Fact():
{ 
  Token n;
  ASTNode t;
  Token id;
}
{
  <MINUS> t = Fact()
  {
    t = new ASTNeg(t);
    return t;
  }
| n = <Num>
  {
    t = new ASTNum(Integer.parseInt(n.image));
    return t;
  }
| <LPAR> t = Exp() <RPAR>
  {
    return t;
  }
| id = <Id>
 {
   return new ASTId(id.image);
 }
| <LCURLY>
		{
			HashMap<String, ASTNode> l = new HashMap<>();
			ASTNode b;
		}

		(
			<LET> (id = <Id>) <EQUALS> (t = Exp()) <DOTCOMMA>
			{
				l.put(id.image, t);
			}
		) *

		( b = Exp() )
  <RCURLY>

  {
    return new ASTDef(b, l);
  }
}
