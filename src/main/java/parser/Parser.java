/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
/** ID lister. */
package parser;

import ast.*;
import ast.flow.*;
import ast.ints.*;
import ast.bools.*;
import java.util.*;
import ast.functions.*;
import ast.references.*;
import ast.typing.utils.Parameter;import utils.*;
import ast.typing.types.*;
import ast.records.*;


public class Parser implements ParserConstants {

  static final public IType Type() throws ParseException {Token id;
    IType t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Id:{
      id = jj_consume_token(Id);
{if ("" != null) return PrimitiveType.valueOf(id.image);}
      break;
      }
    case REF:{
      jj_consume_token(REF);
      jj_consume_token(LT);
      t = Type();
      jj_consume_token(GT);
{if ("" != null) return new ReferenceType(t);}
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
List<IType> params = new ArrayList<>();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:
      case STRUCT:
      case REF:
      case Id:{
        t = Type();
params.add(t);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          jj_consume_token(COMMA);
          t = Type();
params.add(t);
        }
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      jj_consume_token(ARROW);
      t = Type();
{if ("" != null) return new FunctionType(params, t);}
      break;
      }
    case STRUCT:{
      jj_consume_token(STRUCT);
      jj_consume_token(LCURLY);
List<Parameter> params = new ArrayList<>();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Id:{
        id = jj_consume_token(Id);
        jj_consume_token(TWODOTS);
        t = Type();
params.add(new Parameter(id.image, t));
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          id = jj_consume_token(Id);
          jj_consume_token(TWODOTS);
          t = Type();
params.add(new Parameter(id.image, t));
        }
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(RCURLY);
{if ("" != null) return new RecordType(params);}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Start() throws ParseException {ASTNode t;
    t = Instruction();
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Instruction() throws ParseException {ASTNode t = null;
    if (jj_2_1(3)) {
      t = Flow();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LET:
      case IF:
      case PRINTLN:
      case TRUE:
      case FALSE:
      case Num:
      case MINUS:
      case NOT:
      case LPAR:
      case LCURLY:
      case FUN:
      case NEW:
      case STRUCT:
      case DEREFERENCE:
      case Id:{
        t = Exp();
        jj_consume_token(DOTCOMMA);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Block() throws ParseException {ASTNode t = null;
    List<ASTNode> expressions = new ArrayList<>();
    jj_consume_token(LCURLY);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LET:
      case IF:
      case WHILE:
      case PRINTLN:
      case TRUE:
      case FALSE:
      case Num:
      case MINUS:
      case NOT:
      case LPAR:
      case LCURLY:
      case FUN:
      case NEW:
      case STRUCT:
      case DEREFERENCE:
      case Id:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      t = Instruction();
expressions.add(t);
    }
    jj_consume_token(RCURLY);
{if ("" != null) return new ASTBlock(expressions);}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode ElseIfChain() throws ParseException {ASTNode cond, bodyIf, bodyElse = null;
    jj_consume_token(IF);
    jj_consume_token(LPAR);
    cond = Exp();
    jj_consume_token(RPAR);
    bodyIf = Block();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        bodyElse = ElseIfChain();
        break;
        }
      case LCURLY:{
        bodyElse = Block();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
{if ("" != null) return new ASTIf(cond, bodyIf, bodyElse);}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Flow() throws ParseException {ASTNode cond, t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      t = ElseIfChain();
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(LPAR);
      cond = Exp();
      jj_consume_token(RPAR);
      t = Block();
t = new ASTWhile(cond, t);
      break;
      }
    case LCURLY:{
      t = Block();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Exp() throws ParseException {ASTNode t1, t2;
    t1 = OrChain();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      t2 = Exp();
t1 = new ASTAnd(t1, t2);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode OrChain() throws ParseException {ASTNode t1, t2;
    t1 = BoolTerm();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:{
      jj_consume_token(OR);
      t2 = OrChain();
t1 = new ASTOr(t1, t2);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode BoolTerm() throws ParseException {Token op;
        ASTNode t1, t2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      t1 = BoolTerm();
{if ("" != null) return new ASTNot(t1);}
      break;
      }
    case LET:
    case IF:
    case PRINTLN:
    case TRUE:
    case FALSE:
    case Num:
    case MINUS:
    case LPAR:
    case LCURLY:
    case FUN:
    case NEW:
    case STRUCT:
    case DEREFERENCE:
    case Id:{
      t1 = NumExp();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LTE:
      case LT:
      case GTE:
      case GT:
      case EQ:
      case DIFF:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LT:{
          op = jj_consume_token(LT);
          break;
          }
        case LTE:{
          op = jj_consume_token(LTE);
          break;
          }
        case GT:{
          op = jj_consume_token(GT);
          break;
          }
        case GTE:{
          op = jj_consume_token(GTE);
          break;
          }
        case EQ:{
          op = jj_consume_token(EQ);
          break;
          }
        case DIFF:{
          op = jj_consume_token(DIFF);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t2 = NumExp();
switch(op.kind) {
                                        case LT:
                                                t1 = new ASTLowerThan(t1, t2);
                                                break;
                                        case LTE:
                                                t1 = new ASTLowerOrEqual(t1, t2);
                                                break;
                                        case GT:
                                                t1 = new ASTGreaterThan(t1, t2);
                                                break;
                                        case GTE:
                                                t1 = new ASTGreaterOrEqual(t1, t2);
                                                break;
                                        case EQ:
                                                t1 = new ASTEqual(t1, t2);
                                                break;
                                        case DIFF:
                                                t1 = new ASTNotEqual(t1, t2);
                                                break;
                                        default:
                                                {if (true) throw new RuntimeException("Unexpected token");}
                                }
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
{if ("" != null) return t1;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public ASTNode NumExp() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = Term();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        op = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        op = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
if (op.kind == PLUS) {
                        t1 = new ASTPlus(t1, t2);
                }
                else t1 = new ASTMinus(t1, t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Term() throws ParseException {Token op;
        ASTNode t1, t2;
    t1 = Fact();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIMES:
    case DIV:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:{
        op = jj_consume_token(TIMES);
        break;
        }
      case DIV:{
        op = jj_consume_token(DIV);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
if (op.kind == TIMES) {
                        t1 = new ASTTimes(t1, t2);
                }
                else t1 = new ASTDiv(t1, t2);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Fact() throws ParseException {Token n;
  ASTNode t, bodyIf, bodyElse;
  Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return new ASTBool(true);}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return new ASTBool(false);}
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      t = Fact();
t = new ASTNeg(t);
                        {if ("" != null) return t;}
      break;
      }
    case Num:{
      n = jj_consume_token(Num);
t = new ASTNum(Integer.parseInt(n.image));
                        {if ("" != null) return t;}
      break;
      }
    case STRUCT:{
      jj_consume_token(STRUCT);
      jj_consume_token(LCURLY);
List<Pair<String, ASTNode>> values = new ArrayList<>();
            IType type;
      id = jj_consume_token(Id);
      jj_consume_token(EQUALS);
      t = Exp();
values.add(new Pair<>(id.image, t));
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOTCOMMA:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_5;
        }
        jj_consume_token(DOTCOMMA);
        id = jj_consume_token(Id);
        jj_consume_token(EQUALS);
        t = Exp();
values.add(new Pair<>(id.image, t));
      }
      jj_consume_token(RCURLY);
{if ("" != null) return new ASTRecord(values);}
      break;
      }
    case PRINTLN:{
      jj_consume_token(PRINTLN);
      t = Exp();
{if ("" != null) return new ASTPrint(t);}
      break;
      }
    case DEREFERENCE:{
      jj_consume_token(DEREFERENCE);
      t = Fact();
{if ("" != null) return new ASTDereference(t);}
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      t = Exp();
{if ("" != null) return new ASTReference(t);}
      break;
      }
    case LET:{
      jj_consume_token(LET);
      id = jj_consume_token(Id);
      jj_consume_token(EQUALS);
      t = Exp();
{if ("" != null) return new ASTDef(id.image, t);}
      break;
      }
    case FUN:{
      jj_consume_token(FUN);
      jj_consume_token(LPAR);
ArrayList<Pair<String, IType>> p = new ArrayList<>();
                        ASTNode b;
                        IType type;
                        IType retType = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Id:{
        id = jj_consume_token(Id);
        jj_consume_token(TWODOTS);
        type = Type();
p.add(new Pair(id.image, type));
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          id = jj_consume_token(Id);
          jj_consume_token(TWODOTS);
          type = Type();
p.add(new Pair(id.image, type));
        }
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      jj_consume_token(ARROW);
      retType = Type();
      b = Block();
{if ("" != null) return new ASTFunction(b, p, retType);}
      break;
      }
    case LCURLY:{
      t = Block();
{if ("" != null) return t;}
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(LPAR);
      t = Exp();
      jj_consume_token(RPAR);
      bodyIf = Exp();
      jj_consume_token(ELSE);
      bodyElse = Exp();
{if ("" != null) return new ASTIf(t, bodyIf, bodyElse);}
      break;
      }
    case LPAR:
    case Id:{
      t = RefNode();
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public ASTNode RefNode() throws ParseException {ASTNode t;
   ASTNode l;
   Token id;
    l = IdOrExp();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_7;
      }
      jj_consume_token(DOT);
      id = jj_consume_token(Id);
l = new ASTGetField(l, id.image);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:
    case ASSIGN:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        t = Exp();
{if ("" != null) return new ASTAssign(l, t);}
        break;
        }
      case LPAR:{
        jj_consume_token(LPAR);
ArrayList<ASTNode> params = new ArrayList();
                                ASTNode param;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LET:
        case IF:
        case PRINTLN:
        case TRUE:
        case FALSE:
        case Num:
        case MINUS:
        case NOT:
        case LPAR:
        case LCURLY:
        case FUN:
        case NEW:
        case STRUCT:
        case DEREFERENCE:
        case Id:{
          param = Exp();
params.add(param);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[24] = jj_gen;
              break label_8;
            }
            jj_consume_token(COMMA);
            param = Exp();
params.add(param);
          }
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
{if ("" != null) return new ASTFunctionApplication(l, params);}
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode IdOrExp() throws ParseException {ASTNode t;
    Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Id:{
      id = jj_consume_token(Id);
{if ("" != null) return new ASTId(id.image);}
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      t = Exp();
      jj_consume_token(RPAR);
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_Flow_174_11_12()
 {
    if (jj_3R_Block_139_5_15()) return true;
    return false;
  }

  static private boolean jj_3R_Flow_171_11_11()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_Exp_187_9_14()) return true;
    return false;
  }

  static private boolean jj_3R_NumExp_273_3_23()
 {
    if (jj_3R_Term_291_3_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_NumExp_273_16_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_Flow_170_9_10()
 {
    if (jj_3R_ElseIfChain_157_5_13()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_356_11_37()
 {
    if (jj_scan_token(FUN)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3R_Flow_169_5_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Flow_170_9_10()) {
    jj_scanpos = xsp;
    if (jj_3R_Flow_171_11_11()) {
    jj_scanpos = xsp;
    if (jj_3R_Flow_174_11_12()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_Fact_352_11_36()
 {
    if (jj_scan_token(LET)) return true;
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_347_11_35()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_Exp_187_9_14()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_342_11_34()
 {
    if (jj_scan_token(DEREFERENCE)) return true;
    if (jj_3R_Fact_308_9_26()) return true;
    return false;
  }

  static private boolean jj_3R_ElseIfChain_157_5_13()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_Exp_187_9_14()) return true;
    return false;
  }

  static private boolean jj_3R_Instruction_127_32_22()
 {
    if (jj_3R_Exp_187_9_14()) return true;
    if (jj_scan_token(DOTCOMMA)) return true;
    return false;
  }

  static private boolean jj_3R_BoolTerm_229_25_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_Fact_338_11_33()
 {
    if (jj_scan_token(PRINTLN)) return true;
    if (jj_3R_Exp_187_9_14()) return true;
    return false;
  }

  static private boolean jj_3R_IdOrExp_431_7_46()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_Exp_187_9_14()) return true;
    return false;
  }

  static private boolean jj_3R_IdOrExp_430_5_45()
 {
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3R_IdOrExp_430_5_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IdOrExp_430_5_45()) {
    jj_scanpos = xsp;
    if (jj_3R_IdOrExp_431_7_46()) return true;
    }
    return false;
  }

  static private boolean jj_3R_Block_141_9_17()
 {
    if (jj_3R_Instruction_127_5_19()) return true;
    return false;
  }

  static private boolean jj_3R_Block_139_5_15()
 {
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Block_141_9_17()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  static private boolean jj_3R_BoolTerm_227_11_21()
 {
    if (jj_3R_NumExp_273_3_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BoolTerm_229_25_42()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_Fact_321_11_32()
 {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_scan_token(LCURLY)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_316_11_31()
 {
    if (jj_scan_token(Num)) return true;
    return false;
  }

  static private boolean jj_3R_BoolTerm_222_9_20()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_BoolTerm_222_9_18()) return true;
    return false;
  }

  static private boolean jj_3R_BoolTerm_222_9_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BoolTerm_222_9_20()) {
    jj_scanpos = xsp;
    if (jj_3R_BoolTerm_227_11_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_OrChain_205_25_27()
 {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_Flow_169_5_9()) return true;
    return false;
  }

  static private boolean jj_3R_Instruction_127_5_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_Instruction_127_32_22()) return true;
    }
    return false;
  }

  static private boolean jj_3R_RefNode_407_9_51()
 {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_310_11_30()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_Fact_308_9_26()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_309_11_29()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_308_9_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Fact_308_9_28()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_309_11_29()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_310_11_30()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_316_11_31()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_321_11_32()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_338_11_33()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_342_11_34()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_347_11_35()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_352_11_36()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_356_11_37()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_379_19_38()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_382_11_39()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_385_19_40()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_Fact_308_9_28()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_RefNode_402_9_50()
 {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_RefNode_402_9_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RefNode_402_9_50()) {
    jj_scanpos = xsp;
    if (jj_3R_RefNode_407_9_51()) return true;
    }
    return false;
  }

  static private boolean jj_3R_RefNode_399_11_48()
 {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_385_19_40()
 {
    if (jj_3R_RefNode_397_5_41()) return true;
    return false;
  }

  static private boolean jj_3R_OrChain_204_9_16()
 {
    if (jj_3R_BoolTerm_222_9_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OrChain_205_25_27()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_Term_291_16_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    return false;
  }

  static private boolean jj_3R_RefNode_397_5_41()
 {
    if (jj_3R_IdOrExp_430_5_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_RefNode_399_11_48()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_RefNode_402_9_49()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_Fact_379_19_38()
 {
    if (jj_3R_Block_139_5_15()) return true;
    return false;
  }

  static private boolean jj_3R_Exp_188_17_25()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_382_11_39()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3R_Term_291_3_24()
 {
    if (jj_3R_Fact_308_9_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Term_291_16_47()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_Exp_187_9_14()
 {
    if (jj_3R_OrChain_204_9_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Exp_188_17_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_NumExp_273_16_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x20000000,0x800000,0x20000000,0x0,0x800000,0x828105e6,0x828105f6,0x2000004,0x8,0x2000014,0x8000,0x4000,0x7e0000,0x7e0000,0x828105e6,0x600,0x600,0x2800,0x2800,0x10000000,0x20000000,0x0,0x828005e6,0x1000,0x20000000,0x828105e6,0x800000,0x800000,0x800000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x4c,0x0,0x40,0x4c,0x66,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x66,0x0,0x0,0x66,0x10,0x10,0x40,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[43];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 29; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 43; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
