/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
/**
 * ID lister.
 */
package parser;

/** Token Manager. */
@SuppressWarnings("unused")
public class ParserTokenManager implements ParserConstants {

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = {
			"", "\154\145\164", "\151\146", "\145\154\163\145", "\167\150\151\154\145",
			"\160\162\151\156\164\154\156", "\164\162\165\145", "\146\141\154\163\145", null, "\53", "\55", "\52", "\57",
			"\174\174", "\46\46", "\156\157\164", "\74\75", "\74", "\76\75", "\76", "\75\75",
			"\41\75", "\50", "\51", "\173", "\175", "\75", "\73", "\54", "\72", "\146\156",
			"\55\76", "\156\145\167", "\122\145\146", "\72\75", "\41", null, null, null, null, null,};
	/** Lexer state names. */
	public static final String[] lexStateNames = {
			"DEFAULT",
	};
	/** Lex State array. */
	public static final int[] jjnewLexState = {
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	};
	static final int[] jjnextStates = {0
	};
	static final long[] jjtoToken = {
			0x1fffffffffL,
	};
	static final long[] jjtoSkip = {
			0x1e000000000L,
	};
	static final long[] jjtoSpecial = {
			0x0L,
	};
	static final long[] jjtoMore = {
			0x0L,
	};
	static private final int[] jjrounds = new int[3];
	static private final int[] jjstateSet = new int[2 * 3];
	private static final StringBuilder jjimage = new StringBuilder();
	/** Debug output. */
	public static java.io.PrintStream debugStream = System.out;
	static protected SimpleCharStream input_stream;
	static protected int curChar;
	static int curLexState = 0;
	static int defaultLexState = 0;
	static int jjnewStateCnt;
	static int jjround;
	static int jjmatchedPos;
	static int jjmatchedKind;
	private static final StringBuilder image = jjimage;
	private static int jjimageLen;
	private static int lengthOfMatch;

	/** Constructor. */
	public ParserTokenManager(SimpleCharStream stream) {

		if (input_stream != null) {
			throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
		}

		input_stream = stream;
	}

	/** Constructor. */
	public ParserTokenManager(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Set debug output. */
	public static void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private static final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
			case 0:
				if ((active0 & 0x3400080feL) != 0L) {
					jjmatchedKind = 36;
					return 2;
				}
				return -1;
			case 1:
				if ((active0 & 0x40000004L) != 0L) {
					return 2;
				}
				if ((active0 & 0x3000080faL) != 0L) {
					jjmatchedKind = 36;
					jjmatchedPos = 1;
					return 2;
				}
				return -1;
			case 2:
				if ((active0 & 0x300008002L) != 0L) {
					return 2;
				}
				if ((active0 & 0xf8L) != 0L) {
					jjmatchedKind = 36;
					jjmatchedPos = 2;
					return 2;
				}
				return -1;
			case 3:
				if ((active0 & 0x48L) != 0L) {
					return 2;
				}
				if ((active0 & 0xb0L) != 0L) {
					jjmatchedKind = 36;
					jjmatchedPos = 3;
					return 2;
				}
				return -1;
			case 4:
				if ((active0 & 0x90L) != 0L) {
					return 2;
				}
				if ((active0 & 0x20L) != 0L) {
					jjmatchedKind = 36;
					jjmatchedPos = 4;
					return 2;
				}
				return -1;
			case 5:
				if ((active0 & 0x20L) != 0L) {
					jjmatchedKind = 36;
					jjmatchedPos = 5;
					return 2;
				}
				return -1;
			default:
				return -1;
		}
	}

	private static final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	static private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	static private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
			case 33:
				jjmatchedKind = 35;
				return jjMoveStringLiteralDfa1_0(0x200000L);
			case 38:
				return jjMoveStringLiteralDfa1_0(0x4000L);
			case 40:
				return jjStopAtPos(0, 22);
			case 41:
				return jjStopAtPos(0, 23);
			case 42:
				return jjStopAtPos(0, 11);
			case 43:
				return jjStopAtPos(0, 9);
			case 44:
				return jjStopAtPos(0, 28);
			case 45:
				jjmatchedKind = 10;
				return jjMoveStringLiteralDfa1_0(0x80000000L);
			case 47:
				return jjStopAtPos(0, 12);
			case 58:
				jjmatchedKind = 29;
				return jjMoveStringLiteralDfa1_0(0x400000000L);
			case 59:
				return jjStopAtPos(0, 27);
			case 60:
				jjmatchedKind = 17;
				return jjMoveStringLiteralDfa1_0(0x10000L);
			case 61:
				jjmatchedKind = 26;
				return jjMoveStringLiteralDfa1_0(0x100000L);
			case 62:
				jjmatchedKind = 19;
				return jjMoveStringLiteralDfa1_0(0x40000L);
			case 82:
				return jjMoveStringLiteralDfa1_0(0x200000000L);
			case 101:
				return jjMoveStringLiteralDfa1_0(0x8L);
			case 102:
				return jjMoveStringLiteralDfa1_0(0x40000080L);
			case 105:
				return jjMoveStringLiteralDfa1_0(0x4L);
			case 108:
				return jjMoveStringLiteralDfa1_0(0x2L);
			case 110:
				return jjMoveStringLiteralDfa1_0(0x100008000L);
			case 112:
				return jjMoveStringLiteralDfa1_0(0x20L);
			case 116:
				return jjMoveStringLiteralDfa1_0(0x40L);
			case 119:
				return jjMoveStringLiteralDfa1_0(0x10L);
			case 123:
				return jjStopAtPos(0, 24);
			case 124:
				return jjMoveStringLiteralDfa1_0(0x2000L);
			case 125:
				return jjStopAtPos(0, 25);
			default:
				return jjMoveNfa_0(1, 0);
		}
	}

	static private int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (curChar) {
			case 38:
				if ((active0 & 0x4000L) != 0L) {
					return jjStopAtPos(1, 14);
				}
				break;
			case 61:
				if ((active0 & 0x10000L) != 0L) {
					return jjStopAtPos(1, 16);
				} else if ((active0 & 0x40000L) != 0L) {
					return jjStopAtPos(1, 18);
				} else if ((active0 & 0x100000L) != 0L) {
					return jjStopAtPos(1, 20);
				} else if ((active0 & 0x200000L) != 0L) {
					return jjStopAtPos(1, 21);
				} else if ((active0 & 0x400000000L) != 0L) {
					return jjStopAtPos(1, 34);
				}
				break;
			case 62:
				if ((active0 & 0x80000000L) != 0L) {
					return jjStopAtPos(1, 31);
				}
				break;
			case 97:
				return jjMoveStringLiteralDfa2_0(active0, 0x80L);
			case 101:
				return jjMoveStringLiteralDfa2_0(active0, 0x300000002L);
			case 102:
				if ((active0 & 0x4L) != 0L) {
					return jjStartNfaWithStates_0(1, 2, 2);
				}
				break;
			case 104:
				return jjMoveStringLiteralDfa2_0(active0, 0x10L);
			case 108:
				return jjMoveStringLiteralDfa2_0(active0, 0x8L);
			case 110:
				if ((active0 & 0x40000000L) != 0L) {
					return jjStartNfaWithStates_0(1, 30, 2);
				}
				break;
			case 111:
				return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
			case 114:
				return jjMoveStringLiteralDfa2_0(active0, 0x60L);
			case 124:
				if ((active0 & 0x2000L) != 0L) {
					return jjStopAtPos(1, 13);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(0, active0);
	}

	static private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(0, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (curChar) {
			case 102:
				if ((active0 & 0x200000000L) != 0L) {
					return jjStartNfaWithStates_0(2, 33, 2);
				}
				break;
			case 105:
				return jjMoveStringLiteralDfa3_0(active0, 0x30L);
			case 108:
				return jjMoveStringLiteralDfa3_0(active0, 0x80L);
			case 115:
				return jjMoveStringLiteralDfa3_0(active0, 0x8L);
			case 116:
				if ((active0 & 0x2L) != 0L) {
					return jjStartNfaWithStates_0(2, 1, 2);
				} else if ((active0 & 0x8000L) != 0L) {
					return jjStartNfaWithStates_0(2, 15, 2);
				}
				break;
			case 117:
				return jjMoveStringLiteralDfa3_0(active0, 0x40L);
			case 119:
				if ((active0 & 0x100000000L) != 0L) {
					return jjStartNfaWithStates_0(2, 32, 2);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(1, active0);
	}

	static private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(1, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (curChar) {
			case 101:
				if ((active0 & 0x8L) != 0L) {
					return jjStartNfaWithStates_0(3, 3, 2);
				} else if ((active0 & 0x40L) != 0L) {
					return jjStartNfaWithStates_0(3, 6, 2);
				}
				break;
			case 108:
				return jjMoveStringLiteralDfa4_0(active0, 0x10L);
			case 110:
				return jjMoveStringLiteralDfa4_0(active0, 0x20L);
			case 115:
				return jjMoveStringLiteralDfa4_0(active0, 0x80L);
			default:
				break;
		}
		return jjStartNfa_0(2, active0);
	}

	static private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(2, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch (curChar) {
			case 101:
				if ((active0 & 0x10L) != 0L) {
					return jjStartNfaWithStates_0(4, 4, 2);
				} else if ((active0 & 0x80L) != 0L) {
					return jjStartNfaWithStates_0(4, 7, 2);
				}
				break;
			case 116:
				return jjMoveStringLiteralDfa5_0(active0, 0x20L);
			default:
				break;
		}
		return jjStartNfa_0(3, active0);
	}

	static private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(3, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0);
			return 5;
		}
		switch (curChar) {
			case 108:
				return jjMoveStringLiteralDfa6_0(active0, 0x20L);
			default:
				break;
		}
		return jjStartNfa_0(4, active0);
	}

	static private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(4, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0);
			return 6;
		}
		switch (curChar) {
			case 110:
				if ((active0 & 0x20L) != 0L) {
					return jjStartNfaWithStates_0(6, 5, 2);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(5, active0);
	}

	static private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	static private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 3;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (; ; ) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
						case 1:
						case 0:
							if ((0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 8) {
								kind = 8;
							}
						{
							jjCheckNAdd(0);
						}
						break;
						case 2:
							if ((0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 36) {
								kind = 36;
							}
							jjstateSet[jjnewStateCnt++] = 2;
							break;
						default:
							break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
						case 1:
						case 2:
							if ((0x7fffffe07fffffeL & l) == 0L) {
								break;
							}
							if (kind > 36) {
								kind = 36;
							}
						{
							jjCheckNAdd(2);
						}
						break;
						default:
							break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
						default:
							break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = SimpleCharStream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? SimpleCharStream.GetImage() : im;
		beginLine = SimpleCharStream.getBeginLine();
		beginColumn = SimpleCharStream.getBeginColumn();
		endLine = SimpleCharStream.getEndLine();
		endColumn = SimpleCharStream.getEndColumn();
		t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		t.image = curTokenImage;

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	/** Get the next Token. */
	public static Token getNextToken() {
		Token matchedToken;
		int curPos = 0;

		EOFLoop:
		for (; ; ) {
			try {
				curChar = SimpleCharStream.BeginToken();
			} catch (Exception e) {
				jjmatchedKind = 0;
				jjmatchedPos = -1;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try {
				SimpleCharStream.backup(0);
				while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
					curChar = SimpleCharStream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos) {
					SimpleCharStream.backup(curPos - jjmatchedPos - 1);
				}
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = SimpleCharStream.getEndLine();
			int error_column = SimpleCharStream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				SimpleCharStream.readChar();
				SimpleCharStream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else {
					error_column++;
				}
			}
			if (!EOFSeen) {
				SimpleCharStream.backup(1);
				error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
		}
	}

	static void SkipLexicalActions(Token matchedToken) {
		switch (jjmatchedKind) {
			default:
				break;
		}
	}

	static void MoreLexicalActions() {
		jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
		switch (jjmatchedKind) {
			default:
				break;
		}
	}

	static void TokenLexicalActions(Token matchedToken) {
		switch (jjmatchedKind) {
			default:
				break;
		}
	}

	static private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	static private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	static private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	/** Reinitialise parser. */

	static public void ReInit(SimpleCharStream stream) {


		jjmatchedPos =
				jjnewStateCnt =
						0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	static private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 3; i-- > 0; )
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	static public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	public static void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0) {
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
		} else {
			curLexState = lexState;
		}
	}
}
